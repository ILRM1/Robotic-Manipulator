import pickle
import numpy as np
import cv2
import os

data_num=20000
# process trajectories generated by simulator
trajectories=[]
for i in range(data_num):
   f = open("roll_data/position"+str(i)+".txt", 'r')
   lines = f.readlines()
   o=[]
   for line in lines:
       line = line.strip().split(' ')
       line=list(map(float, line))
       o.append(line)
   f.close()
   trajectories.append(np.array(o))

with open(f'position.pkl', 'wb') as f:
   pickle.dump(trajectories, f)

with open(f"position.pkl", 'rb') as f:
    trajectories = pickle.load(f)

# store start time of appearance ball in images
start_point=[]
a=[]
for t,i in enumerate(trajectories):
    for k,j in enumerate(i):
        w, x, y, z = j
        if y<= 2.907+0.33*(x-0.4):
            a.append(t)
            start_point.append(k)
            break
start_point=np.array(start_point)

with open(f'start_time.pkl', 'wb') as f:
    pickle.dump(start_point, f)

with open(f"start_time.pkl", 'rb') as f:
    start_time = pickle.load(f)

# compute trajectories time
for i in range(data_num):
    trajectories[i][:,0]=trajectories[i][:,0]-trajectories[i][start_time[i],0]

# extract labels for transformer
label=[]
for i in range(data_num):
    tmp=[]
    for v,j in enumerate(trajectories[i][::-1]):
        if j[1]-0.4>-0.32 and j[1]-0.4<0.32 and j[2]>0.6:
            if len(tmp)>1:
                break
            else:
                tmp.append(j)

    label.append(np.array(tmp))

print(np.array(label).shape)

with open(f'label.pkl', 'wb') as f:
    pickle.dump(np.array(label), f)


# resize images for Detection network
if not os.path.exists('cnn_roll'):
    os.makedirs('cnn_roll')
k=0
for j in range(data_num):
    for i in range(start_time[j],start_time[j]+1):
        img = cv2.imread('roll_data/img'+str(j)+"/"+str(i)+".png",-1)
        img=img[:320, :160]
        img = cv2.resize(np.array(img, dtype='uint8'), (40, 80), interpolation=cv2.INTER_AREA)
        cv2.imwrite('cnn_roll/' + str(k) + ".png", img)
        k+=1

for j in range(data_num):
    for i in range(start_time[j]-2,start_time[j]-1):
        img = cv2.imread('roll_data/img' + str(j) + "/" + str(i) + ".png", -1)
        img = img[:320, :160]
        img = cv2.resize(np.array(img, dtype='uint8'), (40, 80), interpolation=cv2.INTER_AREA)
        cv2.imwrite('cnn_roll/' + str(k) + ".png", img)
        k+=1

# resize images for Embedding network
for j in range(data_num):
    init_dir = 'roll_resize/img'+str(j)
    if not os.path.exists(init_dir):
        os.makedirs(init_dir)

    for i in range(start_time[j],start_time[j]+10):
        img = cv2.imread('roll_data/img'+str(j)+"/"+str(i)+".png",-1)
        img=img[:390, :]
        img = cv2.resize(np.array(img, dtype='uint8'), (320, 195), interpolation=cv2.INTER_AREA)
        cv2.imwrite(init_dir + "/" + str(i) + ".png", img)